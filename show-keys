#!/bin/bash
# Randy's Colored Keybindings Reference

# Parse command line arguments
show_nvim=true
show_tmux=true
show_bash=true

if [ "$1" = "--type" ] && [ -n "$2" ]; then
    show_nvim=false
    show_tmux=false
    show_bash=false
    
    IFS=',' read -ra TYPES <<< "$2"
    for type in "${TYPES[@]}"; do
        case "$type" in
            nvim) show_nvim=true ;;
            tmux) show_tmux=true ;;
            bash) show_bash=true ;;
            *) echo "Unknown type: $type. Valid types: nvim, tmux, bash" >&2; exit 1 ;;
        esac
    done
fi

echo -e "\033[1;97m‚ú®üî• Randy's Terminal Setup Reference üî•‚ú®\033[0m"

if [ "$show_nvim" = true ]; then
echo -e "\033[1;33müöÄ Neovim Keybindings\033[0m"
echo -e "\t\033[1;36mü™ü Windows & Buffers\033[0m"
echo -e "\t\t\033[32m<C-h/j/k/l>\033[0m            - \033[35mMove between window splits\033[0m    | \033[32m<S-h/l>\033[0m                - \033[35mPrevious/next buffer tab\033[0m"
echo -e "\t\t\033[32m<leader>x\033[0m              - \033[35mClose current buffer\033[0m          | \033[32m<Esc>\033[0m                  - \033[35mClear search highlights\033[0m"
echo -e "\t\033[1;36müîç Search & Navigation\033[0m"
echo -e "\t\t\033[32m<Space>\033[0m                - \033[35mLeader key prefix\033[0m             | \033[32m<leader>sf\033[0m             - \033[35mTelescope find files\033[0m"
echo -e "\t\t\033[32m<leader>sg\033[0m             - \033[35mTelescope live grep search\033[0m    | \033[32m<leader>sh\033[0m             - \033[35mTelescope search help docs\033[0m"
echo -e "\t\t\033[32mgO\033[0m                     - \033[35mTelescope document symbols\033[0m    | \033[32mgW\033[0m                     - \033[35mTelescope workspace symbols\033[0m"
echo -e "\t\t\033[32m<leader>e\033[0m              - \033[35mToggle nvim-tree sidebar\033[0m      | \033[32m<leader>ef\033[0m             - \033[35mFind current file in tree\033[0m"
echo -e "\t\033[1;36müîß LSP & Code Actions\033[0m"
echo -e "\t\t\033[32mgrn\033[0m                    - \033[35mLSP rename symbol\033[0m             | \033[32mgrd\033[0m                    - \033[35mLSP go to definition\033[0m"
echo -e "\t\t\033[32mgrr\033[0m                    - \033[35mLSP find all references\033[0m       | \033[32mgra\033[0m                    - \033[35mLSP show code actions\033[0m"
echo -e "\t\t\033[32m<leader>f\033[0m              - \033[35mFormat code with conform\033[0m      | \033[32m<leader>q\033[0m              - \033[35mOpen diagnostic quickfix\033[0m"
echo -e "\t\t\033[32m<leader>th\033[0m             - \033[35mToggle LSP inlay hints\033[0m        | "
echo -e "\t\033[1;36m‚ú® Completion & Snippets\033[0m"
echo -e "\t\t\033[32m<C-y>\033[0m                  - \033[35mAccept blink completion\033[0m       | \033[32m<C-space>\033[0m              - \033[35mTrigger completion menu\033[0m"
echo -e "\t\t\033[32m<Tab>/<S-Tab>\033[0m          - \033[35mNavigate snippet fields\033[0m       | "
echo -e "\t\033[1;36müíæ Sessions\033[0m"
echo -e "\t\t\033[32m<leader>qs\033[0m             - \033[35mRestore saved session\033[0m         | \033[32m<leader>ql\033[0m             - \033[35mRestore last session\033[0m"
fi

if [ "$show_tmux" = true ]; then
echo -e "\033[1;33müñ•Ô∏è Tmux Keybindings\033[0m"
echo -e "\t\033[1;36m‚å®Ô∏è Prefix & Basic\033[0m"
echo -e "\t\t\033[32m<C-Space>\033[0m              - \033[35mTmux prefix key\033[0m               | \033[32m<prefix>r\033[0m              - \033[35mReload tmux.conf file\033[0m"
echo -e "\t\t\033[32m<C-l>\033[0m                  - \033[35mClear terminal screen\033[0m         | "
echo -e "\t\033[1;36mü™ü Windows & Panes\033[0m"
echo -e "\t\t\033[32m<prefix>s\033[0m              - \033[35mSplit pane horizontally\033[0m       | \033[32m<prefix>v\033[0m              - \033[35mSplit pane vertically\033[0m"
echo -e "\t\t\033[32m<M-h/j/k/l>\033[0m            - \033[35mMove between panes (vim)\033[0m      | \033[32m<prefix>H/J/K/L\033[0m        - \033[35mResize panes (vim)\033[0m"
echo -e "\t\t\033[32m<prefix>n\033[0m              - \033[35mCreate new window\033[0m             | \033[32m<prefix>h/l\033[0m            - \033[35mPrevious/next window\033[0m"
echo -e "\t\t\033[32m<prefix>b\033[0m              - \033[35mMove window to pane horizontal\033[0m | \033[32m<prefix>B\033[0m              - \033[35mMove window to pane vertical\033[0m"
echo -e "\t\t\033[32m<prefix>a\033[0m              - \033[35mBreak pane to new window\033[0m      | "
echo -e "\t\033[1;36müìã Copy Mode\033[0m"
echo -e "\t\t\033[32m<prefix>k\033[0m              - \033[35mEnter copy/scroll mode\033[0m        | \033[32mv ‚Üí y\033[0m                  - \033[35mSelect text ‚Üí copy\033[0m"
echo -e "\t\033[1;36müìÅ File Navigation\033[0m"
echo -e "\t\t\033[32m<prefix>f\033[0m              - \033[35mFzf find file to edit\033[0m         | \033[32m<prefix>e\033[0m              - \033[35mOpen ranger file manager\033[0m"
echo -e "\t\033[1;36müìä Sessions\033[0m"
echo -e "\t\t\033[32m<prefix>S\033[0m              - \033[35mChoose from session list\033[0m      | \033[32m<prefix>!\033[0m              - \033[35mCreate new session\033[0m"
echo -e "\t\t\033[32m<prefix>X\033[0m              - \033[35mKill current session\033[0m          | "
fi

if [ "$show_bash" = true ]; then
echo -e "\033[1;33müíª Bash Aliases & Functions\033[0m"
echo -e "\t\033[1;36müìÇ Navigation & Files\033[0m"
echo -e "\t\t\033[32m..\033[0m                     - \033[35mGo up one directory\033[0m           | \033[32m...\033[0m                    - \033[35mGo up two directories\033[0m"
echo -e "\t\t\033[32m....\033[0m                   - \033[35mGo up three directories\033[0m       | \033[32mmkcd <dir>\033[0m             - \033[35mCreate dir and cd into it\033[0m"
echo -e "\t\t\033[32mcdsc\033[0m                   - \033[35mGo to system-configs repo\033[0m     | \033[32mcdnv\033[0m                   - \033[35mGo to nvim config repo\033[0m"
echo -e "\t\t\033[32mls\033[0m                     - \033[35mList all files with details\033[0m   | \033[32mtree\033[0m                   - \033[35mShow directory tree colored\033[0m"
echo -e "\t\t\033[32mrm/cp/mv\033[0m               - \033[35mSafe file ops (ask first)\033[0m     | \033[32mmkdir\033[0m                  - \033[35mCreate dir with parents\033[0m"
echo -e "\t\t\033[32mextract <file>\033[0m         - \033[35mAuto-extract any archive\033[0m      | \033[32mdf/du/free\033[0m             - \033[35mDisk usage human readable\033[0m"
echo -e "\t\033[1;36müîç Search & Tools\033[0m"
echo -e "\t\t\033[32mcat ‚Üí bat\033[0m              - \033[35mCat with syntax highlight\033[0m     | \033[32mfind ‚Üí fd\033[0m              - \033[35mFaster find with regex\033[0m"
echo -e "\t\t\033[32mgrep ‚Üí rg\033[0m              - \033[35mRipgrep fast text search\033[0m      | \033[32mtop ‚Üí htop\033[0m             - \033[35mInteractive process viewer\033[0m"
echo -e "\t\033[1;36müåê Git Commands\033[0m"
echo -e "\t\t\033[32mgs\033[0m                     - \033[35mShow git repo status\033[0m          | \033[32mga\033[0m                     - \033[35mStage files for commit\033[0m"
echo -e "\t\t\033[32mgc\033[0m                     - \033[35mCommit staged changes\033[0m         | \033[32mgp\033[0m                     - \033[35mPush commits to remote\033[0m"
echo -e "\t\t\033[32mgl\033[0m                     - \033[35mShow commit history brief\033[0m     | \033[32mgb\033[0m                     - \033[35mList all branches\033[0m"
echo -e "\t\t\033[32mgco\033[0m                    - \033[35mSwitch branch or checkout\033[0m     | \033[32mgd\033[0m                     - \033[35mShow file differences\033[0m"
echo -e "\t\033[1;36müõ†Ô∏è Utilities\033[0m"
echo -e "\t\t\033[32mkillp <proc>\033[0m           - \033[35mKill process by name\033[0m          | \033[32mserve [port]\033[0m           - \033[35mStart Python HTTP server\033[0m"
echo -e "\t\t\033[32mnow/nowdate\033[0m            - \033[35mShow current time/date\033[0m        | \033[32mpath\033[0m                   - \033[35mShow PATH dirs formatted\033[0m"
fi

echo -e "\033[2m---\033[0m"
echo -e "\033[2mAuto-generated reference - Last updated: $(date '+%Y-%m-%d %H:%M')\033[0m"